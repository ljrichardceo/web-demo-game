let GameIO = (function(){})();
let GameMath = (function(){})();
let GamePhysics = (function(){})();
let GameAudio = (function(){})();
let GameGraphics = (function(){
    let _context = null;
    let _createContext = function(id, width, height){
        _context = document.getElementById(id).getContext("webgl");
        _context.canvas.width = width;
        _context.canvas.height = height;
    }
    let _logContext = function(){
        let log = {
            canvas: _context.canvas.id,
            drawingBufferWidth: _context.drawingBufferWidth,
            drawingBufferHeight: _context.drawingBufferHeight,
            alpha: _context.getContextAttributes().alpha,
            depth: _context.getContextAttributes().depth,
            stencil: _context.getContextAttributes().stencil,
            antialias: _context.getContextAttributes().antialias,
            premultipliedAlpha: _context.getContextAttributes().premultipliedAlpha,
            preserveDrawingBuffer: _context.getContextAttributes().preserveDrawingBuffer
        };
        return log;
    }
    return {
        createContext : _createContext,
        logContext: _logContext
    }
})();
let GameAsset = (function(){})();

function GameTerrain(){}
function GameWater(){}
function GameCar(){}
function GameTree(){}
function GameRock(){}
function GameBuilding(){}
function GameStaircase(){}
function GameDoor(){}
function GameWindow(){}
function GameRagdoll(){}
function GameCrate(){}
function GameBall(){}
function GameCanister(){}

function GameContent(){}
GameContent.prototype.initialize = function(){}
GameContent.prototype.activate = function(){}
GameContent.prototype.load = function(){}
GameContent.prototype.refresh = function(){}
GameContent.prototype.deactivate = function(){}
GameContent.prototype.deinitialize = function(){}

function GameRenderer(){}
GameRenderer.prototype.initialize = function(){}
GameRenderer.prototype.activate = function(){}
GameRenderer.prototype.load = function(){}
GameRenderer.prototype.render = function(content){}
GameRenderer.prototype.deactivate = function(){}
GameRenderer.prototype.deinitialize = function(){}

function GameEngine(content, renderer){
    this.frame = 0;
    this.content = content;
    this.renderer = renderer;
}
GameEngine.prototype.initialize = function(){
    this.content.initialize();
    this.renderer.initialize();
}   
GameEngine.prototype.activate = function(){
    this.content.activate();
    this.renderer.activate();
}
GameEngine.prototype.load = function(){
    this.content.load();
    this.renderer.load();
}
GameEngine.prototype.render = function(){
    this.renderer.render(this.content);
}
GameEngine.prototype.refresh = function(){
    this.content.refresh();   
}
GameEngine.prototype.process = function(callback){
    this.frame = requestAnimationFrame(callback);
}
GameEngine.prototype.unprocess = function(){
    cancelAnimationFrame(this.frame);
}
GameEngine.prototype.deactivate = function(){
    this.content.deactivate();
    this.renderer.deactivate();    
}
GameEngine.prototype.deinitialize = function(){
    this.content.deinitialize();
    this.renderer.deinitialize();    
}

function GameRuntime(engine){
    this.engine = engine;
}
GameRuntime.prototype.preloop = function(){
    this.engine.initialize();
    this.engine.load();
    this.engine.activate();
}
GameRuntime.prototype.loop = function(){
    this.engine.render();
    this.engine.refresh();
    this.engine.process(this.loop.bind(this));
}
GameRuntime.prototype.unloop = function(){
    this.engine.unprocess();
}
GameRuntime.prototype.postloop = function(){
    this.engine.deactivate();
    this.engine.deinitialize();
}
GameRuntime.prototype.reloop = function(){
    this.engine.deactivate();
    this.engine.deinitialize();
    this.engine.initialize();
    this.engine.load();
    this.engine.activate();
}

function GameSystem(runtime){
    this.runtime = runtime;
}
GameSystem.prototype.start = function(){
    this.runtime.preloop();
}
GameSystem.prototype.play = function(){
    this.runtime.loop();
}
GameSystem.prototype.pause = function(){
    this.runtime.unloop();
}
GameSystem.prototype.stop = function(){
    this.runtime.postloop();
}
GameSystem.prototype.reset = function(){
    this.runtime.reloop();
}